name: Build Webvault .deb packages

on: push

jobs:
  build-debs:
    runs-on: ubuntu-latest

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get -q update
        sudo apt-get -qy install debhelper dpkg-sig

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Import GPG key
      id: import_gpg
      uses: gvtulder/ghaction-import-gpg@master
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}

    - name: Build vaultwarden .deb
      run: |
        cd vaultwarden/
        make deb

    - name: Build vaultwarden-web-vault .deb
      run: |
        cd vaultwarden-web-vault/
        make deb

    - name: Sign .deb files
      run: |
        dpkg-sig -k ${{ steps.import_gpg.outputs.keyid }} --sign builder *.deb

    - name: Create APT repository
      run: |
        mkdir -p repo/
        cd repo/
        cp ../*.deb .
        apt-ftparchive packages . > Packages
        bzip2 -kf Packages
        apt-ftparchive -o APT::FTPArchive::AlwaysStat="true" -o APT::FTPArchive::Release::Codename="./" -o APT::FTPArchive::Release::Acquire-By-Hash="yes" release . > Release
        gpg --yes -abs -u ${{ steps.import_gpg.outputs.keyid }} -o Release.gpg --digest-algo sha256 Release
        gpg --yes -abs -u ${{ steps.import_gpg.outputs.keyid }} --clearsign -o InRelease --digest-algo sha256 Release
        cd ..

    - name: Export public key
      run: |
        gpg --export ${{ steps.import_gpg.outputs.keyid }} > webvault-archive-keyring.gpg
        gpg --armor --export ${{ steps.import_gpg.outputs.keyid }} > webvault-archive-keyring.asc
        cp webvault-archive-keyring.gpg repo/
        cp webvault-archive-keyring.asc repo/

    - name: Archive .deb files, public keys, APT files
      uses: actions/upload-artifact@v2
      with:
        name: output
        path: repo/

    - name: Upload files to GitHub release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        python -u update-repo-release.py \
            --target-owner gvtulder \
            --target-project vaultwarden-deb \
            --target-release apt-get \
            --source-dir repo
